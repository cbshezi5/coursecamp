<?php

require '../include/sessions.php';

class Admin extends Session{

	private $context;
	private $add;
	private $id;
	private $userReportId;
	private $FILE;

	function __construct($context, $add = "", $id = 0){

		parent::__construct();

		$this->context = $context;
		$this->id = $this->getUserId();
		$this->add = $add;

		if(!$this->isAdmin()){

			$this->error("You Do Not Have Permission For This Action");

		}

		switch ($this->context) {
			case 1:

					$this->addMoreCourses();

				break;

			case 2 :

			    $this->getAllUsers();

			   break;

			case 3 : 

					$this->userReportId = $id;

					$this->createReport();

			case 4 : 

					$this->userReportId = $id;

					$this->deleteAccount();

				break;

			case 5 :

					$this->createAdmin();

				break;
			
			default:

					$this->error("Incomplete Request");

				break;
		}

	}
/*695*/
	private function createAdmin(){

		$random = rand(10, 100);
		$name = 'Admin'.$random;
		$surname = $random;
		$email = "admin".$random."@coursecamp.co.za";
		$password = md5("admin".$random);
		$rawPassword = "admin".$random;
		$id = "0000000000000";
		$type = 'admin';

		if($this->insert("INSERT INTO users VALUES('$name', '$surname', '$email', '$id', '$password','$type', NULL)")){

			$admin = $this->row("SELECT * FROM users where email = '$email'");
			$adminId = $admin['user_id'];

			$email = "admin".$random.$adminId."@coursecamp.co.za";

			$this->update("UPDATE users SET email = '$email' WHERE user_id = '$adminId'");

			echo json_encode(array(
				"error" => false,
				"message" => "Admin Created Successful",
				"password" => $rawPassword,
				"email" => $email
			));
			exit();

		}else{

			$this->error("Admin Account Not Created");

		}

	}


	private function addMoreCourses(){

		$faculty 	= $this->add['faculty'];
		$course 	= $this->add['course'];
		$aps 			= $this->add['aps'];
		$campus 	= $this->add['campus'];

		if($this->insert("INSERT INTO courses VALUES('$faculty', '$course', '$aps', '$campus', NULL)")){

			echo json_encode(array(
				"error" => false,
				"message" => "Course Added Successful"
			));
			exit();

		}else{

			$this->error("Course Not Added Successful");

		}

	}

	private function getAllUsers(){

		$users = $this->rows("SELECT * FROM users WHERE type = 'user'");

		while($user = $this->assoc($users)){

			$resp['users'][] = $user;

		}

		$resp['error'] = isset($resp['users']) ? false : true;
		$resp['message'] = isset($resp['users']) ? 'Users Found' : 'Users Not Found';

		echo json_encode($resp);
		exit();

	}

	private function createReport(){

		$user = $this->row("SELECT * FROM users WHERE user_id = '$this->userReportId'");

		$filename = $user['name']."_".$user['id_number']."_user_file.txt";

		$this->FILE = fopen($filename, 'w');

		if(!$this->FILE){ echo json_encode(array("error" => true, "message" => "Unable To Generate User Report")); exit(); }

		$this->writeUserInfo($user);

		if($this->count("SELECT count(subject_id) FROM user_subjects WHERE user_id = '$this->userReportId'") > 0){

			$subjects = $this->rows("SELECT * FROM user_subjects WHERE user_id = '$this->userReportId'");

			$this->writeSubjects($subjects);

		}else{

			$_TEXT = "\n\n\nNo Subjects Entered To Show\n\n";
			fwrite($this->FILE, $_TEXT);

		}

		fclose($this->FILE);

		echo json_encode(array(
			"file" => '../api/root/'.$filename,
			"message" => "Report Generated",
			"error" => false
		));
		exit();

	}

	private function writeUserInfo($user){


		$_TEXT = "Document Auto-generated By CourseCamp Entitled To \n\nMr\Mrs\Ms ".$user['name']." ".$user['surname']."\n\n\n\n Subjects Entered By ".$user['name']." ".$user['surname'];

		fwrite($this->FILE, $_TEXT);

	}

	private function writeSubjects($subjects){

		$aps = 0;

		$_TEXT = "\n\n\n";

		while ($subject = $this->assoc($subjects)) {
			
			$_TEXT .= "SUBJECT : ".$subject['subject']." | SUBJECT LEVEL : ".$subject['sub_level']."\n\n";

			$aps += (int) $subject['sub_level'];

		}

		$_TEXT .= "\n\n\n\nAPS : ".$aps;

		fwrite($this->FILE, $_TEXT);

	}

	private function deleteAccount(){

		if($this->delete("DELETE FROM users WHERE user_id = '$this->userReportId'")){

			echo json_encode(array("error" => false, "message" => "User Deleted Successfully"));
			exit();

		}else{

			$this->error("Unable To Delete This User");

		}

	}


}


if(isset($_POST['context'])){

	switch ($_POST['context']) {
		case 1:

				if(isset($_POST['faculty']) && isset($_POST['course']) && isset($_POST['aps']) && isset($_POST['campus'])){

					$add['faculty'] = $_POST['faculty'];
					$add['course'] = $_POST['course'];
					$add['aps'] = $_POST['aps'];
					$add['campus'] = $_POST['campus'];

					new Admin($_POST['context'], $add);

				}else{

					echo json_encode(array("error" => true, "message" => "Incomplete Request"));
					exit();

				}

			break;

		case 2 :

				new Admin($_POST['context']);

			break;

		case 3 : 

				new Admin($_POST['context'], "", $_POST['id']);

		  break;

		case 4 : 

				new Admin($_POST['context'], "", $_POST['id']);

		  break;

		case 5 :

			 new Admin($_POST['context'], "", "");

			break;
		
		default:
			echo json_encode(array("error" => true, "message" => "Incomplete Request"));
					exit();
			break;
	}


}else{

	echo json_encode(array(

		"error" => true,
		"message" => "Invalid Request"
	));

	exit();

}

?>
